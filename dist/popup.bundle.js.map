{"version":3,"file":"popup.bundle.js","mappings":";;;;;;AAAA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL,GAAG;AACH;;;;;;;UCfA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACqB;;;ACNd;AACP;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0C;AACgB;AACV;AAChD;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,sBAAsB,mCAAmC;AACzD;AACA;AACA,QAAQ,mBAAmB;AAC3B;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,2BAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA,kDAAkD,yBAAyB;AAC3E,WAAW;AACX,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA,WAAW;AACX,SAAS;AACT,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe,mBAAmB;AAC9C;AACA;AACA;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAoD;AACxE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,YAAY,mCAAmC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA,6CAA6C,qBAAqB;AAClE;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,kBAAkB,mCAAmC;AACrD;AACA,wDAAwD,sBAAsB;AAC9E;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,GAAG;AACH;AACA;AACA,6BAA6B,yBAAyB;AACtD;AACA,GAAG;AACH;AACA;AACA,+BAA+B,iCAAiC;AAChE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU;AAC5B;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qBAAqB;AAC3B;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA,+BAA+B;AAC/B,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0BAA0B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D;AACA,aAAa;AACb,YAAY;AACZ,YAAY,0BAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA,6CAA6C,YAAY;AACzD,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,KAAK,YAAY;AAC1E;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA","sources":["webpack://pki-chrome/./src/utils/LocalStorage.js","webpack://pki-chrome/webpack/bootstrap","webpack://pki-chrome/./src/utils/Enums.js","webpack://pki-chrome/./src/utils/fetchUtils.js","webpack://pki-chrome/./src/popup.js"],"sourcesContent":["function checkList (webDomain) {\r\n  return new Promise((resolve, reject) => {\r\n    chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n      const websiteList = items.websiteList\r\n      if (websiteList.hasOwnProperty(webDomain)) {\r\n        if (websiteList[webDomain].isSensitive) {\r\n          resolve(0)\r\n        } else {\r\n          resolve(1)\r\n        }\r\n      } else {\r\n        resolve(-1)\r\n      }\r\n    })\r\n  })\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const ViewStates = {\r\n  DEFAULT: 0,\r\n  SavedSitesList: 1,\r\n  Settings: 2\r\n}\r\n\r\nexport { ViewStates }\r\n","export function fetchCertificateChain (webDomain) {\r\n  // Remove \"www.\" from the beginning of the domain\r\n  const shortenedDomain = webDomain.replace(/^www\\./, '')\r\n  return fetch(\r\n    `http://pkie.engr.uconn.edu/certificate_chain/${shortenedDomain}`\r\n  )\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if (data.status) {\r\n        return data.output\r\n      } else {\r\n        throw new Error('Failed to fetch certificate chain')\r\n      }\r\n    })\r\n}\r\n\r\nfunction fetchTestWebsites () {\r\n  return fetch(`http://localhost:8080/websites`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      return data\r\n    })\r\n    .catch(error => {\r\n      throw new Error('Failed to fetch websites')\r\n    })\r\n}\r\n","// 1. Make website get unblocked when extension is opened (unblock by sending message on session open) - done\r\n// 2. Get cookies from a website for the user ID instead of extension login page - done\r\n// 3. Check cert everytime for our own experiemnts and only per browser session for usual websites - done\r\n// 4. Send data (timestamp, action, unique user id) - done\r\n// 5. Feedback (points functionality) - done\r\n// 6. change time format - prithvi comment - done\r\n// 7. List of changes (last meeting) - done\r\n// 8. block website when user do not trust it without reload - done\r\n// 9. do not notify user of pass field when site is protected - done\r\n// 10. change background of blocker text to highlight - done\r\n// 11. if cert chain does not match then block always subdomain\r\n// 12. Make blockerMessage more elaborate and explain - done\r\n// 13. remove login page - done\r\n// 14. Fix points system conditions - done\r\n// 15. problem with backend - sometimes data is not updated\r\n\r\n// decide on points system\r\n// review msg system\r\n// change logo\r\n// disable extension for period of time\r\n// cookies stuff\r\n\r\nimport { ViewStates } from './utils/Enums'\r\nimport { fetchCertificateChain } from './utils/fetchUtils'\r\nimport { checkList } from './utils/LocalStorage'\r\n\r\nvar pointsLocal = 0\r\nvar user_id = '123456'\r\nvar viewState = ViewStates.DEFAULT\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  chrome.storage.local.get('points', function (data) {\r\n    if (data.points) {\r\n      pointsLocal = data.points\r\n    }\r\n  })\r\n\r\n  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n    chrome.tabs.sendMessage(\r\n      tabs[0].id,\r\n      { action: 'testing' },\r\n      function (response) {\r\n        console.log('T' + pointsLocal)\r\n        document.getElementById('points').textContent = `Points: ${pointsLocal}`\r\n      }\r\n    )\r\n  })\r\n\r\n  // retrieve user id\r\n  chrome.storage.local.get('userId', function (data) {\r\n    if (data.userId) {\r\n      user_id = data.userId\r\n    }\r\n  })\r\n\r\n  removeView()\r\n\r\n  initializeExtension()\r\n\r\n  const navbarBurger = document.querySelector('.navbar-burger')\r\n  const navbarMenu = document.getElementById('navbarMenu')\r\n\r\n  navbarBurger.addEventListener('click', function () {\r\n    navbarBurger.classList.toggle('is-active')\r\n    navbarMenu.classList.toggle('is-active')\r\n  })\r\n})\r\n\r\nfunction initializeExtension () {\r\n  logUserData(user_id, 3)\r\n  console.log(user_id)\r\n\r\n  displaySensitiveSitesDropdown()\r\n\r\n  document.getElementById('choose-option').style.display = 'block' //\r\n  document.getElementById('sensitive-save-btn').style.display = 'block' //\r\n  document.getElementById('unsafe-save-btn').style.display = 'block' //\r\n  document.getElementById('not-recognized-text').style.display = 'block' //\r\n  document.getElementById('points').style.display = 'block' //\r\n  document.getElementById('sensitive-sites-dropdown').style.display = 'block' //\r\n\r\n  document.getElementById('sensitive-sites-dropdown-container').style.display =\r\n    ''\r\n  document.getElementById('report-phish-prompt-text').style.display = 'block' //\r\n  document.getElementById('report-phish-prompt-text').style.display = 'block' //\r\n\r\n  document.getElementById('sensitive-sites-dropdown-container').style.display =\r\n    ''\r\n  document.getElementById(\r\n    'points-feedback-click-before-blocked'\r\n  ).style.display = 'none'\r\n  document.getElementById('points-feedback-click-when-blocked').style.display =\r\n    'none'\r\n\r\n  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n    const url = tabs[0].url\r\n    const urlObj = new URL(url)\r\n    const webDomain = urlObj.hostname\r\n    const favicon = tabs[0].favIconUrl\r\n\r\n    const urlContainer = document.getElementById('url-container')\r\n    urlContainer.textContent = 'URL: ' + webDomain\r\n\r\n    const faviconImage = document.createElement('img')\r\n    faviconImage.src = favicon\r\n    faviconImage.alt = 'Favicon'\r\n\r\n    const previousFavicon = document.getElementById('favicon-img')\r\n    if (previousFavicon) {\r\n      previousFavicon.remove()\r\n    }\r\n\r\n    faviconImage.id = 'favicon-img'\r\n    const faviconContainer = document.getElementById('favicon-container')\r\n    faviconContainer.appendChild(faviconImage)\r\n\r\n    checkList(webDomain).then(result => {\r\n      if (result === 0) {\r\n        removeView()\r\n        document.getElementById('all-set').style.display = 'block'\r\n\r\n        logUserData(user_id, 2)\r\n\r\n        chrome.storage.local.get({ sessionList: {} }, function (items) {\r\n          const sessionList = items.sessionList\r\n          sessionList[webDomain] = true\r\n          chrome.storage.local.set({ sessionList: sessionList }, function () {\r\n            console.log('Website added to session list', webDomain)\r\n            chrome.tabs.sendMessage(tabs[0].id, { action: 'removeBlocker' }) //send message to unblock\r\n          })\r\n        })\r\n      } else if (result === 1) {\r\n        removeView()\r\n        document.getElementById('site-blocked-text').style.display = 'block'\r\n        document.getElementById('unblock-once').style.display = 'block'\r\n\r\n        chrome.storage.local.get({ sessionList: {} }, function (items) {\r\n          const sessionList = items.sessionList\r\n          sessionList[webDomain] = true\r\n          chrome.storage.local.set({ sessionList: sessionList }, function () {\r\n            console.log('Website added to session list', webDomain)\r\n          })\r\n        })\r\n      } else {\r\n        console.log('Website not found in the list')\r\n      }\r\n    })\r\n\r\n    document\r\n      .getElementById('sensitive-save-btn')\r\n      .addEventListener('click', function () {\r\n        chrome.storage.local.get(\r\n          { websiteList: {}, sessionList: {} },\r\n          function (items) {\r\n            const websiteList = items.websiteList\r\n            const sessionList = items.sessionList\r\n\r\n            fetchCertificateChain(webDomain)\r\n              .then(certificateChain => {\r\n                websiteList[webDomain] = {\r\n                  isSensitive: true,\r\n                  certificateChain: certificateChain\r\n                }\r\n                sessionList[webDomain] = true\r\n                chrome.storage.local.set(\r\n                  { websiteList: websiteList, sessionList: sessionList },\r\n                  function () {\r\n                    console.log('Website Saved as Sensitive', webDomain)\r\n                    console.log('Website added to session list', webDomain)\r\n                    chrome.tabs.sendMessage(tabs[0].id, {\r\n                      action: 'removeBlocker'\r\n                    }) //send message to unblock\r\n                  }\r\n                )\r\n\r\n                chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n                  const websiteList = items.websiteList\r\n                  console.log('Website List:', websiteList)\r\n                })\r\n                removeView()\r\n                document.getElementById('added-to-trusted').style.display =\r\n                  'block'\r\n\r\n                logUserData(user_id, 4)\r\n                logUserData(user_id, 7)\r\n              })\r\n              .catch(error => {\r\n                console.error('Error fetching certificate chain:', error)\r\n                // Handle the error, e.g., display an error message to the user\r\n              })\r\n          }\r\n        )\r\n      })\r\n\r\n    document\r\n      .getElementById('unsafe-save-btn')\r\n      .addEventListener('click', function () {\r\n        chrome.tabs.query(\r\n          { active: true, currentWindow: true },\r\n          function (tabs) {\r\n            const currentSite = new URL(tabs[0].url).hostname\r\n            const selectedSite = document.getElementById(\r\n              'sensitive-sites-dropdown'\r\n            ).value\r\n\r\n            if (currentSite && selectedSite) {\r\n              chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n                const websiteList = items.websiteList\r\n                websiteList[currentSite] = { isSensitive: false } // Mark the current site as unsafe\r\n                chrome.storage.local.set(\r\n                  { websiteList: websiteList },\r\n                  function () {\r\n                    console.log(\r\n                      'Current website marked as unsafe:',\r\n                      currentSite\r\n                    )\r\n                    displayUnsafeSites()\r\n                  }\r\n                )\r\n\r\n                // Log the selected site with the current site\r\n                logUserData(user_id, 10, selectedSite, currentSite)\r\n              })\r\n              removeView()\r\n              document.getElementById('added-to-untrust').style.display =\r\n                'block'\r\n              document.getElementById('unblock-once').style.display = 'block'\r\n              chrome.tabs.query(\r\n                { active: true, currentWindow: true },\r\n                function (tabs) {\r\n                  chrome.tabs.sendMessage(tabs[0].id, { action: 'addBlocker' }) // Optionally, send a message to block the site\r\n                }\r\n              )\r\n            } else {\r\n              console.error(\r\n                'Error: No current site or no site selected to report.'\r\n              )\r\n            }\r\n          }\r\n        )\r\n      })\r\n  })\r\n\r\n  const autoSearchCheckbox = document.getElementById('auto-search-checkbox')\r\n  chrome.storage.local.get({ autoSearchEnabled: true }, function (data) {\r\n    autoSearchCheckbox.checked = data.autoSearchEnabled\r\n  })\r\n\r\n  autoSearchCheckbox.addEventListener('change', function () {\r\n    chrome.storage.local.set({ autoSearchEnabled: this.checked })\r\n  })\r\n}\r\n\r\nfunction removeView () {\r\n  document.getElementById('choose-option').style.display = 'none' //\r\n  document.getElementById('added-to-trusted').style.display = 'none'\r\n  document.getElementById('sensitive-save-btn').style.display = 'none' //\r\n  document.getElementById('unsafe-save-btn').style.display = 'none' //\r\n  document.getElementById(\r\n    'not-marked-sensitive-proceed-caution'\r\n  ).style.display = 'none'\r\n  document.getElementById('added-to-untrust').style.display = 'none'\r\n  document.getElementById('not-recognized-text').style.display = 'none' //\r\n  document.getElementById('site-blocked-text').style.display = 'none'\r\n  document.getElementById('sensitive-sites-dropdown-container').style.display =\r\n    'none'\r\n  document.getElementById('report-phish-prompt-text').style.display = 'none'\r\n  document.getElementById('unblock-once').style.display = 'none'\r\n}\r\n\r\nconst navEditSavedSitesButton = document.getElementById(\r\n  'nav-edit-saved-sites-toggle'\r\n)\r\nnavEditSavedSitesButton.addEventListener('click', () => {\r\n  switch (viewState) {\r\n    case ViewStates.DEFAULT:\r\n      removeView()\r\n      // document.getElementById('sensitive-sites-list').style.display = 'block'\r\n      // document.getElementById('sensitive-input').style.display = 'block'\r\n      // document.getElementById('sensitive-save').style.display = 'block'\r\n      document.getElementById('sensitive-site-controls').style.display = 'block'\r\n      document\r\n      displaySensitiveSites()\r\n      displayUnsafeSites()\r\n      navEditSavedSitesButton.textContent = 'BACK'\r\n      viewState = ViewStates.SavedSitesList\r\n      break\r\n    case ViewStates.SavedSitesList:\r\n      document.getElementById('sensitive-site-controls').style.display = 'none'\r\n      document.getElementById('choose-option').style.display = 'block' //\r\n      document.getElementById('sensitive-save-btn').style.display = 'block' //\r\n      document.getElementById('unsafe-save-btn').style.display = 'block' //\r\n      document.getElementById('not-recognized-text').style.display = 'block' //\r\n      document.getElementById('points').style.display = 'block' //\r\n      document.getElementById('sensitive-sites-dropdown').style.display =\r\n        'block' //\r\n\r\n      document.getElementById(\r\n        'sensitive-sites-dropdown-container'\r\n      ).style.display = ''\r\n      document.getElementById('report-phish-prompt-text').style.display =\r\n        'block' //\r\n      document.getElementById('report-phish-prompt-text').style.display =\r\n        'block' //\r\n\r\n      document.getElementById(\r\n        'sensitive-sites-dropdown-container'\r\n      ).style.display = ''\r\n      document.getElementById(\r\n        'points-feedback-click-before-blocked'\r\n      ).style.display = 'none'\r\n      document.getElementById(\r\n        'points-feedback-click-when-blocked'\r\n      ).style.display = 'none'\r\n\r\n      navEditSavedSitesButton.textContent = 'Saved sites list'\r\n      //check if our changes include this site now being safe...\r\n      // const url = new URL(window.location.href)\r\n      // const webDomain = url.hostname\r\n\r\n      // checkList(webDomain).then(result => {\r\n      //   removeView()\r\n      //   document.getElementById('added-to-trusted').style.display = 'block'\r\n      // })\r\n\r\n      viewState = ViewStates.DEFAULT\r\n      break\r\n  }\r\n})\r\n// document.getElementById('nav-sensitive').addEventListener('click', function () {\r\n//   removeView()\r\n//   document.getElementById('sensitive-sites-list').style.display = 'block'\r\n//   document.getElementById('sensitive-input').style.display = 'block'\r\n//   document.getElementById('sensitive-save').style.display = 'block'\r\n//   displaySensitiveSites()\r\n// })\r\n\r\n// document.getElementById('nav-unsafe').addEventListener('click', function () {\r\n//   removeView()\r\n//   document.getElementById('unsafe-sites-list').style.display = 'block'\r\n//   document.getElementById('unsafe-input').style.display = 'block'\r\n//   document.getElementById('unsafe-save').style.display = 'block'\r\n//   displayUnsafeSites()\r\n// })\r\n\r\n//temp unblocking site\r\ndocument.getElementById('unblock-once').addEventListener('click', function () {\r\n  chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n    const url = new URL(tabs[0].url)\r\n    const domain = url.hostname\r\n\r\n    // Send message to content script to remove the blocker\r\n    chrome.tabs.sendMessage(tabs[0].id, { action: 'removeBlocker' })\r\n\r\n    logUserData(user_id, 11)\r\n\r\n    // Display the temporary unblock text\r\n    document.getElementById('temp-unblock-text').style.display = 'block'\r\n    document.getElementById('site-blocked-text').style.display = 'none'\r\n    document.getElementById('unblock-once').style.display = 'none'\r\n  })\r\n})\r\n\r\nfunction displaySensitiveSites () {\r\n  chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n    const websiteList = items.websiteList\r\n    const sensitiveSitesList = document.getElementById('sensitive-sites-list')\r\n    sensitiveSitesList.innerHTML = ''\r\n\r\n    for (const website in websiteList) {\r\n      if (websiteList[website].isSensitive) {\r\n        const siteButton = document.createElement('button')\r\n        siteButton.textContent = website\r\n        siteButton.classList.add(\r\n          'button',\r\n          'is-primary',\r\n          'is-small',\r\n          'is-rounded',\r\n          'sensitive-site'\r\n        )\r\n        siteButton.addEventListener('click', function () {\r\n          removeSensitiveSite(website)\r\n        })\r\n        sensitiveSitesList.appendChild(siteButton)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nfunction displaySensitiveSitesDropdown () {\r\n  chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n    const websiteList = items.websiteList\r\n    const sensitiveSitesDropdown = document.getElementById(\r\n      'sensitive-sites-dropdown'\r\n    )\r\n    // Clear existing options\r\n    sensitiveSitesDropdown.innerHTML = ''\r\n\r\n    // Add a default option\r\n    const defaultOption = document.createElement('option')\r\n    defaultOption.textContent = 'Select the Protected Site'\r\n    defaultOption.value = ''\r\n    sensitiveSitesDropdown.appendChild(defaultOption)\r\n\r\n    // Append new options for each sensitive site\r\n    for (const website in websiteList) {\r\n      if (websiteList[website].isSensitive) {\r\n        const option = document.createElement('option')\r\n        option.value = website\r\n        option.textContent = website\r\n        sensitiveSitesDropdown.appendChild(option)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nfunction displayUnsafeSites () {\r\n  chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n    const websiteList = items.websiteList\r\n    const unsafeSitesList = document.getElementById('unsafe-sites-list')\r\n    unsafeSitesList.innerHTML = ''\r\n\r\n    for (const website in websiteList) {\r\n      if (!websiteList[website].isSensitive) {\r\n        const siteButton = document.createElement('button')\r\n        siteButton.textContent = website\r\n        siteButton.classList.add(\r\n          'button',\r\n          'is-danger',\r\n          'is-small',\r\n          'is-rounded',\r\n          'unsafe-site'\r\n        )\r\n        siteButton.addEventListener('click', function () {\r\n          removeUnsafeSite(website)\r\n        })\r\n        unsafeSitesList.appendChild(siteButton)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\ndocument\r\n  .getElementById('sensitive-save')\r\n  .addEventListener('click', function () {\r\n    const sensitiveInput = document.querySelector('#sensitive-input input')\r\n    const website = sensitiveInput.value.trim()\r\n    console.log(sensitiveInput)\r\n    if (website !== '') {\r\n      fetchCertificateChain(website)\r\n        .then(certificateChain => {\r\n          chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n            const websiteList = items.websiteList\r\n            websiteList[website] = {\r\n              isSensitive: true,\r\n              certificateChain: certificateChain\r\n            }\r\n            chrome.storage.local.set({ websiteList: websiteList }, function () {\r\n              console.log('Website saved as protected:', website)\r\n              sensitiveInput.value = ''\r\n              displaySensitiveSites()\r\n            })\r\n          })\r\n\r\n          logUserData(user_id, 4)\r\n          logUserData(user_id, 7)\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching certificate chain:', error)\r\n          // Handle the error, e.g., display an error message to the user\r\n        })\r\n    }\r\n  })\r\n\r\ndocument.getElementById('unsafe-save').addEventListener('click', function () {\r\n  const unsafeInput = document.querySelector('#unsafe-input input')\r\n  const website = unsafeInput.value.trim()\r\n\r\n  if (website !== '') {\r\n    chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n      const websiteList = items.websiteList\r\n      websiteList[website] = { isSensitive: false }\r\n      chrome.storage.local.set({ websiteList: websiteList }, function () {\r\n        console.log('Website saved as unsafe:', website)\r\n        unsafeInput.value = ''\r\n        displayUnsafeSites()\r\n      })\r\n    })\r\n\r\n    logUserData(user_id, 6)\r\n    logUserData(user_id, 7)\r\n  }\r\n})\r\n\r\n// for feedback on points\r\nchrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n  const url = new URL(tabs[0].url)\r\n  const domain = url.hostname // Get the domain of the current site\r\n\r\n  // Retrieve the session list from storage\r\n  chrome.storage.local.get({ sessionList: {} }, function (items) {\r\n    const sessionList = items.sessionList\r\n\r\n    // Check if the current site is in the session list\r\n    if (!sessionList[domain]) {\r\n      // Only proceed if the site is NOT in the session list\r\n      chrome.tabs.sendMessage(\r\n        tabs[0].id,\r\n        { action: 'checkIfClicked' },\r\n        function (response) {\r\n          if (response && response.clicked) {\r\n            document.getElementById(\r\n              'points-feedback-click-when-blocked'\r\n            ).style.display = 'block'\r\n            pointsLocal -= 5 // deduct points for interacting with blocked site\r\n            chrome.storage.local.set({ points: pointsLocal }, function () {\r\n              console.log(pointsLocal)\r\n            })\r\n          } else {\r\n            checkList(domain).then(result => {\r\n              // first check if site is protected\r\n              if (result === 0) {\r\n                document.getElementById(\r\n                  'points-feedback-click-before-blocked'\r\n                ).style.display = 'block'\r\n                pointsLocal += 5 //add points for being proactive in protected sites\r\n                chrome.storage.local.set({ points: pointsLocal }, function () {\r\n                  console.log(pointsLocal)\r\n                  document.getElementById(\r\n                    'points'\r\n                  ).textContent = `Points: ${pointsLocal}`\r\n                })\r\n              }\r\n            })\r\n          }\r\n        }\r\n      )\r\n    } else {\r\n      // Optionally, handle the case where the site is in the session list\r\n      console.log('The site is in the session list. No feedback message shown.')\r\n    }\r\n  })\r\n})\r\n\r\nfunction removeSensitiveSite (website) {\r\n  chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n    const websiteList = items.websiteList\r\n    delete websiteList[website]\r\n    chrome.storage.local.set({ websiteList: websiteList }, function () {\r\n      console.log('Sensitive site removed:', website)\r\n      displaySensitiveSites()\r\n      logUserData(user_id, 8)\r\n      logUserData(user_id, 7)\r\n    })\r\n  })\r\n}\r\n\r\nfunction removeUnsafeSite (website) {\r\n  chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n    const websiteList = items.websiteList\r\n    delete websiteList[website]\r\n    chrome.storage.local.set({ websiteList: websiteList }, function () {\r\n      console.log('Unsafe site removed:', website)\r\n      displayUnsafeSites()\r\n      logUserData(user_id, 9)\r\n      logUserData(user_id, 7)\r\n    })\r\n  })\r\n}\r\n\r\n// log data - happens manually in contentScript\r\nfunction logUserData (\r\n  user_id,\r\n  event_number,\r\n  reportedSite = '',\r\n  currentSite = ''\r\n) {\r\n  const timestamp = Date.now()\r\n  console.log(timestamp)\r\n\r\n  let eventComments = {\r\n    1: 'Interact with protected website without opening extension',\r\n    2: 'Open popup on protected site',\r\n    3: 'Open popup',\r\n    4: 'Site saved as protected',\r\n    5: 'Site saved as protected after being saved as unsafe',\r\n    6: 'Site saved as unsafe',\r\n    8: 'Protected site removed',\r\n    9: 'Unsafe site removed',\r\n    11: 'Site Unblocked Temporarily'\r\n  }\r\n\r\n  let comment = eventComments[event_number] || 'Unknown event'\r\n\r\n  // Handling event 10 for reporting phishing\r\n  if (event_number === 10) {\r\n    comment = `Reported phishing on site ${reportedSite} by ${currentSite}`\r\n  }\r\n  if (event_number === 7) {\r\n    // Special handling for event 7 - save sensitive site info\r\n    console.log('SAVEE')\r\n    chrome.storage.local.get({ websiteList: {} }, function (items) {\r\n      const websiteList = items.websiteList\r\n      const sensitiveWebsites = []\r\n      for (const domain in websiteList) {\r\n        if (websiteList[domain].isSensitive) {\r\n          sensitiveWebsites.push(domain)\r\n        }\r\n      }\r\n      const sensitiveListComment =\r\n        'List of Sensitive Websites: ' + sensitiveWebsites.join(', ')\r\n      console.log(sensitiveListComment)\r\n\r\n      chrome.runtime.sendMessage({\r\n        action: 'logUserData',\r\n        user_id: user_id,\r\n        timestamp: timestamp,\r\n        event: event_number,\r\n        comment: sensitiveListComment\r\n      })\r\n    })\r\n  } else {\r\n    console.log(comment)\r\n    chrome.runtime.sendMessage({\r\n      action: 'logUserData',\r\n      user_id: user_id,\r\n      timestamp: timestamp,\r\n      event: event_number,\r\n      comment: comment\r\n    })\r\n  }\r\n}\r\nconsole.log('Ok done with setup')\r\n"],"names":[],"sourceRoot":""}