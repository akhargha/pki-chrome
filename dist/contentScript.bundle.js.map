{"version":3,"file":"contentScript.bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,eAAe,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6BAA6B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6DAA6D;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,UAAU,yBAAyB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://pki-chrome/./src/contentScript.js"],"sourcesContent":["//CONTENT SCRIPTS ARE SCRIPTS RAN IN THE CONTEXT OF THE WEBPAGES. THEY ARE WHAT HAS ACCESS TO THE DOM AND ALL IT'S ELEMENTS\r\nconst url = new URL(window.location.href)\r\nconst webDomain = url.hostname\r\n\r\nconsole.log(webDomain)\r\n\r\nlet blockerClicked = false\r\n\r\nuser_id = '123456'\r\nchrome.storage.local.get('userId', function (data) {\r\n  if (data.userId) {\r\n    user_id = data.userId\r\n  }\r\n})\r\n\r\nchrome.storage.local.get(\r\n  { websiteList: {}, sessionList: {} },\r\n  function (items) {\r\n    if (items.websiteList[webDomain]) {\r\n      if (items.websiteList[webDomain].isSensitive) {\r\n        // Check if the site is in protected list\r\n        console.log('sensitive site')\r\n        // Check if the site is in session list\r\n        if (items.sessionList[webDomain]) {\r\n          console.log('in session list')\r\n          // If in session list, remove blocker if it exists\r\n          removeBlocker()\r\n\r\n          // Check if site is test site\r\n          chrome.runtime.sendMessage(\r\n            { action: 'fetchTestWebsites' },\r\n            function (response) {\r\n              console.log('checking')\r\n              if (response && response.websites) {\r\n                const testWebsites = response.websites\r\n                if (testWebsites.includes(webDomain)) {\r\n                  //if site is test site then check cert\r\n                  const shortenedDomain = webDomain.replace(/^www\\./, '')\r\n                  chrome.runtime.sendMessage(\r\n                    {\r\n                      action: 'fetchCertificateChain',\r\n                      webDomain: shortenedDomain\r\n                    },\r\n                    function (response) {\r\n                      if (response.certificateChain) {\r\n                        const savedCertificateChain =\r\n                          items.websiteList[webDomain].certificateChain\r\n                        if (\r\n                          compareCertificateChains(\r\n                            response.certificateChain,\r\n                            savedCertificateChain\r\n                          )\r\n                        ) {\r\n                          console.log('Certificate chain matches')\r\n                        } else {\r\n                          console.log('Certificate chain does not match')\r\n                          //DO OTHER STUFF HERE\r\n                          addBlocker(\r\n                            'Some security information about this site has been changed! This is usually an indicator of an attack. Please click on the extension to proceed.'\r\n                          )\r\n                        }\r\n                      } else if (response.error) {\r\n                        console.error(\r\n                          'Error fetching certificate chain:',\r\n                          response.error\r\n                        )\r\n                        // If there's an error fetching the certificate chain, add blocker\r\n                        addBlocker(\r\n                          'Some security information about this site has been changed! This is usually an indicator of an attack. Please click on the extension to proceed.'\r\n                        )\r\n                      }\r\n                    }\r\n                  )\r\n                }\r\n              }\r\n            }\r\n          )\r\n        } else {\r\n          console.log('not in session list')\r\n          // If not in session list, send a message to the background script to fetch the certificate chain\r\n\r\n          // Remove \"www.\" from the beginning of the domain\r\n          const shortenedDomain = webDomain.replace(/^www\\./, '')\r\n          console.log(shortenedDomain)\r\n\r\n          chrome.runtime.sendMessage(\r\n            { action: 'fetchCertificateChain', webDomain: shortenedDomain },\r\n            function (response) {\r\n              if (response.certificateChain) {\r\n                const savedCertificateChain =\r\n                  items.websiteList[webDomain].certificateChain\r\n                if (\r\n                  compareCertificateChains(\r\n                    response.certificateChain,\r\n                    savedCertificateChain\r\n                  )\r\n                ) {\r\n                  console.log('Certificate chain matches')\r\n                  addBlocker(\r\n                    'You have marked this site to be protected. Please click on the extension before proceeding to prevent yourself from cyber attacks.'\r\n                  )\r\n                } else {\r\n                  console.log('Certificate chain does not match')\r\n                  //DO OTHER STUFF HERE\r\n                  addBlocker(\r\n                    'Some security information about this site has been changed! This is usually an indicator of an attack. Please click on the extension to proceed.'\r\n                  )\r\n                }\r\n              } else if (response.error) {\r\n                console.error(\r\n                  'Error fetching certificate chain:',\r\n                  response.error\r\n                )\r\n                // If there's an error fetching the certificate chain, add blocker\r\n                addBlocker(\r\n                  'Some security information about this site has been changed! This is usually an indicator of an attack. Please click on the extension to proceed.'\r\n                )\r\n              }\r\n            }\r\n          )\r\n        }\r\n      } else {\r\n        console.log('unsafe site')\r\n\r\n        //check for password fields for unsafe sites\r\n        chrome.storage.local.get(\r\n          { autoSearchEnabled: true },\r\n          function (settings) {\r\n            if (settings.autoSearchEnabled) {\r\n              const passwordFields = document.querySelectorAll(\r\n                'input[type=\"password\"]'\r\n              )\r\n              if (passwordFields.length > 0) {\r\n                alert(\r\n                  'ðŸ”’ Extension Alert: This site may contain sensitive information with password fields. Click the ðŸ”’ extension for safety. \\n \\n To disable future alerts, uncheck \"automatic detection\" in extension settings ðŸ”’.'\r\n                )\r\n              }\r\n            }\r\n          }\r\n        )\r\n\r\n        // Add blocker\r\n        addBlocker(\r\n          'This site is marked as unsafe. Please click on the extension before proceeding to prevent yourself from cyber attacks.'\r\n        )\r\n      }\r\n    } else {\r\n      //check for password fields for unsaved sites\r\n      chrome.storage.local.get(\r\n        { autoSearchEnabled: true },\r\n        function (settings) {\r\n          if (settings.autoSearchEnabled) {\r\n            const passwordFields = document.querySelectorAll(\r\n              'input[type=\"password\"]'\r\n            )\r\n            if (passwordFields.length > 0) {\r\n              alert(\r\n                'ðŸ”’ Extension Alert: This site may contain sensitive information with password fields. Click the ðŸ”’ extension for safety. \\n \\n To disable future alerts, uncheck \"automatic detection\" in extension settings ðŸ”’.'\r\n              )\r\n            }\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n)\r\n\r\nfunction addBlocker (\r\n  message = 'This site is blocked by the extension. Click on the extension to continue'\r\n) {\r\n  if (!document.getElementById('myBlockerDiv')) {\r\n    var blockerDiv = document.createElement('div')\r\n    blockerDiv.id = 'myBlockerDiv'\r\n    blockerDiv.style.position = 'fixed'\r\n    blockerDiv.style.left = '0'\r\n    blockerDiv.style.top = '0'\r\n    blockerDiv.style.width = '100vw' // Width as 100% of viewport width\r\n    blockerDiv.style.height = '100vh' // Height as 100% of viewport height\r\n    blockerDiv.style.zIndex = '10000'\r\n\r\n    document.body.appendChild(blockerDiv)\r\n\r\n    var blockerMessage = document.createElement('h1')\r\n    blockerMessage.style.color = 'black' // Changed to yellow background\r\n    blockerMessage.style.fontFamily = 'Trebuchet MS'\r\n    blockerMessage.style.fontSize = '50px'\r\n    blockerMessage.style.textAlign = 'center'\r\n    blockerMessage.style.position = 'absolute' // Ensure it's positioned relative to the blockerDiv\r\n    blockerMessage.style.top = '50%' // Center vertically in the middle of the viewport\r\n    blockerMessage.style.left = '50%' // Center horizontally\r\n    blockerMessage.style.transform = 'translate(-50%, -50%)' // Ensure it's centered perfectly\r\n    blockerMessage.innerHTML = message // Use the message parameter\r\n    blockerMessage.style.display = 'none' // Initially hide the message\r\n\r\n    // Flashing colors for the text\r\n    var colors = ['red', 'blue', 'green', 'white'] // Define colors to cycle through\r\n    var currentColorIndex = 0 // Starting index\r\n    setInterval(function () {\r\n      blockerMessage.style.backgroundColor = colors[currentColorIndex] // Update the color\r\n      currentColorIndex = (currentColorIndex + 1) % colors.length // Move to the next color\r\n    }, 500) // Change color every 500 milliseconds\r\n\r\n    blockerDiv.appendChild(blockerMessage)\r\n\r\n    // Show message/feedback when user clicks without opening extension\r\n    blockerDiv.addEventListener('click', function () {\r\n      blockerClicked = true\r\n      blockerMessage.style.display = 'block' // Show the message on click\r\n\r\n      chrome.runtime.sendMessage({ action: 'blockerDivClicked' }) // Send msg to popup.js to show feedback\r\n\r\n      const timestamp = Date.now()\r\n      console.log(timestamp)\r\n      const event = '1'\r\n      const comment =\r\n        'Interact with protected website without opening extension'\r\n      chrome.runtime.sendMessage({\r\n        action: 'logUserData',\r\n        user_id: user_id,\r\n        timestamp: timestamp,\r\n        event: event,\r\n        comment: comment\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nfunction removeBlocker () {\r\n  var blockerDiv = document.getElementById('myBlockerDiv')\r\n  if (blockerDiv) {\r\n    blockerDiv.remove()\r\n  }\r\n}\r\n\r\n// Listener for messages\r\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n  if (request.action === 'removeBlocker') {\r\n    removeBlocker()\r\n  }\r\n  if (request.action === 'addBlocker') {\r\n    addBlocker()\r\n  }\r\n  if (request.action === 'checkIfClicked') {\r\n    sendResponse({ clicked: blockerClicked })\r\n    blockerClicked = false\r\n  }\r\n})\r\n\r\nfunction compareCertificateChains (chain1, chain2) {\r\n  if (Object.keys(chain1).length !== Object.keys(chain2).length) {\r\n    return false\r\n  }\r\n\r\n  for (const key in chain1) {\r\n    if (key === 'ev') {\r\n      if (chain1[key] !== chain2[key]) {\r\n        return false\r\n      }\r\n    } else {\r\n      const obj1 = chain1[key]\r\n      const obj2 = chain2[key]\r\n\r\n      if (\r\n        !compareObjects(obj1.subject, obj2.subject) ||\r\n        !compareObjects(obj1.issuer, obj2.issuer)\r\n      ) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction compareObjects (obj1, obj2) {\r\n  const keys1 = Object.keys(obj1)\r\n  const keys2 = Object.keys(obj2)\r\n\r\n  if (keys1.length !== keys2.length) {\r\n    return false\r\n  }\r\n\r\n  for (const key of keys1) {\r\n    if (obj1[key] !== obj2[key]) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n"],"names":[],"sourceRoot":""}