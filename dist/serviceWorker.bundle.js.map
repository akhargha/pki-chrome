{"version":3,"file":"serviceWorker.bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;;;;;UCzBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACN0D;AAC1D;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB,gBAAgB;AACvE,mBAAmB,0BAA0B;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,wEAAqB;AACzB;AACA,uBAAuB,oCAAoC;AAC3D,OAAO;AACP;AACA;AACA,uBAAuB,sBAAsB;AAC7C,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,uBAAuB,oBAAoB;AAC3C,OAAO;AACP;AACA;AACA,uBAAuB,sBAAsB;AAC7C,OAAO;AACP;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ,GAAG,UAAU,GAAG,MAAM,GAAG,QAAQ;AACrF;AACA","sources":["webpack://pki-chrome/./src/utils/fetchUtils.js","webpack://pki-chrome/webpack/bootstrap","webpack://pki-chrome/webpack/runtime/define property getters","webpack://pki-chrome/webpack/runtime/hasOwnProperty shorthand","webpack://pki-chrome/webpack/runtime/make namespace object","webpack://pki-chrome/./src/serviceWorker.js"],"sourcesContent":["export function fetchCertificateChain (webDomain) {\r\n  // Remove \"www.\" from the beginning of the domain\r\n  const shortenedDomain = webDomain.replace(/^www\\./, '')\r\n  return fetch(\r\n    `http://pkie.engr.uconn.edu/certificate_chain/${shortenedDomain}`\r\n  )\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if (data.status) {\r\n        return data.output\r\n      } else {\r\n        throw new Error('Failed to fetch certificate chain')\r\n      }\r\n    })\r\n}\r\n\r\nfunction fetchTestWebsites () {\r\n  return fetch(`http://localhost:8080/websites`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      return data\r\n    })\r\n    .catch(error => {\r\n      throw new Error('Failed to fetch websites')\r\n    })\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { fetchCertificateChain } from './utils/fetchUtils'\r\n\r\nchrome.runtime.onStartup.addListener(function () {\r\n  chrome.storage.local.set({ sessionList: {} }, function () {\r\n    console.log('Session list cleared on startup')\r\n  })\r\n})\r\n\r\n// background.js\r\nchrome.runtime.onMessageExternal.addListener(function (\r\n  request,\r\n  sender,\r\n  sendResponse\r\n) {\r\n  if (request.type === 'storeUserId') {\r\n    chrome.storage.local.set({ userId: request.userId }, function () {})\r\n    sendResponse({ status: 'User ID stored' })\r\n  }\r\n  return true\r\n})\r\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n  if (request.action === 'fetchCertificateChain') {\r\n    fetchCertificateChain(request.webDomain)\r\n      .then(certificateChain => {\r\n        sendResponse({ certificateChain: certificateChain })\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching certificate chain:', error)\r\n        sendResponse({ error: error.message })\r\n      })\r\n    return true // Required to use sendResponse asynchronously\r\n  } else if (request.action === 'logUserData') {\r\n    logUserData(\r\n      request.user_id,\r\n      request.timestamp,\r\n      request.event,\r\n      request.comment\r\n    )\r\n  } else if (request.action === 'fetchTestWebsites') {\r\n    fetchTestWebsites()\r\n      .then(websites => {\r\n        sendResponse({ websites: websites })\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching websites:', error)\r\n        sendResponse({ error: error.message })\r\n      })\r\n    return true // Required to use sendResponse asynchronously\r\n  }\r\n})\r\n\r\nfunction logUserData (user_id, timestamp, event, comment) {\r\n  fetch(\r\n    `http://pkie.engr.uconn.edu/user_data/${user_id}/${timestamp}/${event}/${comment}`\r\n  )\r\n}\r\n"],"names":[],"sourceRoot":""}