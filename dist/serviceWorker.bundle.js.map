{"version":3,"file":"serviceWorker.bundle.js","mappings":";;;;;AAAO;AACP;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA,SAAS,4BAAiB;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;ACzB0D;AAC1D;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB,gBAAgB;AACvE,mBAAmB,0BAA0B;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,qBAAqB;AACzB;AACA,uBAAuB,oCAAoC;AAC3D,OAAO;AACP;AACA;AACA,uBAAuB,sBAAsB;AAC7C,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,uBAAuB,oBAAoB;AAC3C,OAAO;AACP;AACA;AACA,uBAAuB,sBAAsB;AAC7C,OAAO;AACP;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ,GAAG,UAAU,GAAG,MAAM,GAAG,QAAQ;AACrF;AACA","sources":["webpack://pki-chrome/./src/utils/fetchUtils.js","webpack://pki-chrome/./src/serviceWorker.js"],"sourcesContent":["export function fetchCertificateChain (webDomain) {\r\n  // Remove \"www.\" from the beginning of the domain\r\n  const shortenedDomain = webDomain.replace(/^www\\./, '')\r\n  return fetch(\r\n    `http://pkie.engr.uconn.edu/certificate_chain/${shortenedDomain}`\r\n  )\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if (data.status) {\r\n        return data.output\r\n      } else {\r\n        throw new Error('Failed to fetch certificate chain')\r\n      }\r\n    })\r\n}\r\n\r\nfunction fetchTestWebsites () {\r\n  return fetch(`http://localhost:8080/websites`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      return data\r\n    })\r\n    .catch(error => {\r\n      throw new Error('Failed to fetch websites')\r\n    })\r\n}\r\n","import { fetchCertificateChain } from './utils/fetchUtils'\r\n\r\nchrome.runtime.onStartup.addListener(function () {\r\n  chrome.storage.local.set({ sessionList: {} }, function () {\r\n    console.log('Session list cleared on startup')\r\n  })\r\n})\r\n\r\n// background.js\r\nchrome.runtime.onMessageExternal.addListener(function (\r\n  request,\r\n  sender,\r\n  sendResponse\r\n) {\r\n  if (request.type === 'storeUserId') {\r\n    chrome.storage.local.set({ userId: request.userId }, function () {})\r\n    sendResponse({ status: 'User ID stored' })\r\n  }\r\n  return true\r\n})\r\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n  if (request.action === 'fetchCertificateChain') {\r\n    fetchCertificateChain(request.webDomain)\r\n      .then(certificateChain => {\r\n        sendResponse({ certificateChain: certificateChain })\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching certificate chain:', error)\r\n        sendResponse({ error: error.message })\r\n      })\r\n    return true // Required to use sendResponse asynchronously\r\n  } else if (request.action === 'logUserData') {\r\n    logUserData(\r\n      request.user_id,\r\n      request.timestamp,\r\n      request.event,\r\n      request.comment\r\n    )\r\n  } else if (request.action === 'fetchTestWebsites') {\r\n    fetchTestWebsites()\r\n      .then(websites => {\r\n        sendResponse({ websites: websites })\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching websites:', error)\r\n        sendResponse({ error: error.message })\r\n      })\r\n    return true // Required to use sendResponse asynchronously\r\n  }\r\n})\r\n\r\nfunction logUserData (user_id, timestamp, event, comment) {\r\n  fetch(\r\n    `http://pkie.engr.uconn.edu/user_data/${user_id}/${timestamp}/${event}/${comment}`\r\n  )\r\n}\r\n"],"names":[],"sourceRoot":""}